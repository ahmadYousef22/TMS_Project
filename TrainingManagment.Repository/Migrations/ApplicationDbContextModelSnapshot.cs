// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingManagment.Repository.Data;

namespace TrainingManagment.Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Security");
                });

            modelBuilder.Entity("TopicsTrainer", b =>
                {
                    b.Property<int>("TopicsTopicId")
                        .HasColumnType("int");

                    b.Property<int>("TrainersTrainerId")
                        .HasColumnType("int");

                    b.HasKey("TopicsTopicId", "TrainersTrainerId");

                    b.HasIndex("TrainersTrainerId");

                    b.ToTable("TopicsTrainer");
                });

            modelBuilder.Entity("TrainingManagement.Domain.Models.Topics", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyOn");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TopicId");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("TrainingManagement.Domain.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyOn");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.Lookup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LookupCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyOn");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LookupCategoryId");

                    b.ToTable("Lookup");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(72),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 100,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "عمل",
                            NameEn = "Work"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(155),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 100,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "جامعة",
                            NameEn = "University"
                        },
                        new
                        {
                            Id = 3,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(158),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = ".Net",
                            NameEn = "Dot Net"
                        },
                        new
                        {
                            Id = 4,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(159),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "محلل أعمال",
                            NameEn = "Business Analyst"
                        },
                        new
                        {
                            Id = 5,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(161),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مراقبة الجودة",
                            NameEn = "Quality Control"
                        },
                        new
                        {
                            Id = 6,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(163),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "بنية الأنظمة",
                            NameEn = "Infrastructure"
                        },
                        new
                        {
                            Id = 7,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(165),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "واجهة المستخدم وتجربة المستخدم",
                            NameEn = "UI UX"
                        },
                        new
                        {
                            Id = 8,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(166),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "الموارد البشرية",
                            NameEn = "Human Resources"
                        },
                        new
                        {
                            Id = 9,
                            Code = 7,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(168),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "المالية",
                            NameEn = "Finance"
                        },
                        new
                        {
                            Id = 10,
                            Code = 8,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(170),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 200,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "الذكاء الاصطناعي",
                            NameEn = "AI"
                        },
                        new
                        {
                            Id = 11,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(171),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 300,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "نشط",
                            NameEn = "Active"
                        },
                        new
                        {
                            Id = 12,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(173),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 300,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "قيد الانتظار",
                            NameEn = "Pending"
                        },
                        new
                        {
                            Id = 13,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(175),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 300,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مكتمل",
                            NameEn = "Finished"
                        },
                        new
                        {
                            Id = 14,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(176),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "الانضمام إلى فريق TPS",
                            NameEn = "Joining TPS Team"
                        },
                        new
                        {
                            Id = 15,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(178),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "معلق",
                            NameEn = "On Hold"
                        },
                        new
                        {
                            Id = 16,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(180),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مرفوض",
                            NameEn = "Rejected"
                        },
                        new
                        {
                            Id = 17,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(181),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 400,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "استقال",
                            NameEn = "Quit"
                        },
                        new
                        {
                            Id = 18,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(183),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "خالد سلامة",
                            NameEn = "Khalid Salameh"
                        },
                        new
                        {
                            Id = 19,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(185),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "لميس حوراني",
                            NameEn = "Lamees Hourani"
                        },
                        new
                        {
                            Id = 20,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(187),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "مريم السعداوي",
                            NameEn = "Mariam AlSadawi"
                        },
                        new
                        {
                            Id = 21,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(270),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "محمد حماد",
                            NameEn = "Mohammad Hamad"
                        },
                        new
                        {
                            Id = 22,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(272),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "محمد عبده",
                            NameEn = "Mohammad Ibdah"
                        },
                        new
                        {
                            Id = 23,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(274),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "صفاء",
                            NameEn = "Safaa"
                        },
                        new
                        {
                            Id = 24,
                            Code = 7,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(276),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "زكريا لافي",
                            NameEn = "Zakaria Lafi"
                        },
                        new
                        {
                            Id = 25,
                            Code = 8,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(277),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 500,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "أحمد سويلم",
                            NameEn = "Ahmed Sweilem"
                        },
                        new
                        {
                            Id = 26,
                            Code = 2023,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(279),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2023",
                            NameEn = "2023"
                        },
                        new
                        {
                            Id = 27,
                            Code = 2024,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(281),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2024",
                            NameEn = "2024"
                        },
                        new
                        {
                            Id = 28,
                            Code = 2025,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(282),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2025",
                            NameEn = "2025"
                        },
                        new
                        {
                            Id = 29,
                            Code = 2026,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(284),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2026",
                            NameEn = "2026"
                        },
                        new
                        {
                            Id = 30,
                            Code = 2027,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(286),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2027",
                            NameEn = "2027"
                        },
                        new
                        {
                            Id = 31,
                            Code = 2028,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(288),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2028",
                            NameEn = "2028"
                        },
                        new
                        {
                            Id = 32,
                            Code = 2029,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(289),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2029",
                            NameEn = "2029"
                        },
                        new
                        {
                            Id = 33,
                            Code = 2030,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(291),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2030",
                            NameEn = "2030"
                        },
                        new
                        {
                            Id = 34,
                            Code = 2031,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 170, DateTimeKind.Local).AddTicks(292),
                            Description = "",
                            IsActive = true,
                            IsDeleted = false,
                            LookupCategoryId = 600,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "2031",
                            NameEn = "2031"
                        });
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.LookupCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyOn");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("LookupCategory");

                    b.HasData(
                        new
                        {
                            CategoryId = 100,
                            Code = 1,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 169, DateTimeKind.Local).AddTicks(2863),
                            Description = "Training Type That TPS Provided",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "نوع التدريب",
                            NameEn = "Training Type"
                        },
                        new
                        {
                            CategoryId = 200,
                            Code = 2,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 169, DateTimeKind.Local).AddTicks(3174),
                            Description = "Training Topics That TPS Provided",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "موضوعات التدريب",
                            NameEn = "Training Topics"
                        },
                        new
                        {
                            CategoryId = 300,
                            Code = 3,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 169, DateTimeKind.Local).AddTicks(3177),
                            Description = "Training Status",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "حالة التدريب",
                            NameEn = "Training Status"
                        },
                        new
                        {
                            CategoryId = 400,
                            Code = 4,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 169, DateTimeKind.Local).AddTicks(3178),
                            Description = "Training Result",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "نتيجة التدريب",
                            NameEn = "Training Result"
                        },
                        new
                        {
                            CategoryId = 500,
                            Code = 5,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 169, DateTimeKind.Local).AddTicks(3180),
                            Description = "Trainer Name",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "أسم المدرب",
                            NameEn = "Trainer Name"
                        },
                        new
                        {
                            CategoryId = 600,
                            Code = 6,
                            CreatedBy = "Malek Hamdan",
                            CreatedOn = new DateTime(2023, 11, 1, 9, 25, 29, 169, DateTimeKind.Local).AddTicks(3182),
                            Description = "Training Year That TPS Provided",
                            IsActive = true,
                            IsDeleted = false,
                            ModifyOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NameAr = "السنة",
                            NameEn = "Year"
                        });
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.Session", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedOn");

                    b.Property<byte[]>("EvaluationFile")
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("EvaluationScore")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinalPresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifyBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifyOn")
                        .HasColumnType("datetime2")
                        .HasColumnName("ModifyOn");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.Property<string>("TraineeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TrainerId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerNameId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingResultId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingTopicId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Year")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SessionId");

                    b.HasIndex("TopicId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainerNameId");

                    b.HasIndex("TrainingResultId");

                    b.HasIndex("TrainingStatusId");

                    b.HasIndex("TrainingTopicId");

                    b.HasIndex("TrainingTypeId");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TrainingManagment.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TrainingManagment.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManagment.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TrainingManagment.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TopicsTrainer", b =>
                {
                    b.HasOne("TrainingManagement.Domain.Models.Topics", null)
                        .WithMany()
                        .HasForeignKey("TopicsTopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingManagement.Domain.Models.Trainer", null)
                        .WithMany()
                        .HasForeignKey("TrainersTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.Lookup", b =>
                {
                    b.HasOne("TrainingManagment.Domain.Models.LookupCategory", "LookupCategory")
                        .WithMany("Lookups")
                        .HasForeignKey("LookupCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LookupCategory");
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.Session", b =>
                {
                    b.HasOne("TrainingManagement.Domain.Models.Topics", "Topics")
                        .WithMany()
                        .HasForeignKey("TopicId");

                    b.HasOne("TrainingManagement.Domain.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId");

                    b.HasOne("TrainingManagment.Domain.Models.Lookup", "TrainerName")
                        .WithMany()
                        .HasForeignKey("TrainerNameId");

                    b.HasOne("TrainingManagment.Domain.Models.Lookup", "TrainingResult")
                        .WithMany()
                        .HasForeignKey("TrainingResultId");

                    b.HasOne("TrainingManagment.Domain.Models.Lookup", "TrainingStatus")
                        .WithMany()
                        .HasForeignKey("TrainingStatusId");

                    b.HasOne("TrainingManagment.Domain.Models.Lookup", "TrainingTopic")
                        .WithMany()
                        .HasForeignKey("TrainingTopicId");

                    b.HasOne("TrainingManagment.Domain.Models.Lookup", "TrainingType")
                        .WithMany()
                        .HasForeignKey("TrainingTypeId");

                    b.Navigation("Topics");

                    b.Navigation("Trainer");

                    b.Navigation("TrainerName");

                    b.Navigation("TrainingResult");

                    b.Navigation("TrainingStatus");

                    b.Navigation("TrainingTopic");

                    b.Navigation("TrainingType");
                });

            modelBuilder.Entity("TrainingManagment.Domain.Models.LookupCategory", b =>
                {
                    b.Navigation("Lookups");
                });
#pragma warning restore 612, 618
        }
    }
}
